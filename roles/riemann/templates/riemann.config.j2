; -*- mode: clojure; -*-
; vim: filetype=clojure

(logging/init {:file "/var/log/riemann/riemann.log"})

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "0.0.0.0"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host}))

; Expire old events from the index every 60 seconds.
(periodically-expire 60)

(def credentials {:account {{ ansible_env.SLACK_ACCOUNT|default('"changeme"') }}, :token {{ ansible_env.SLACK_TOKEN|default('"changeme"') }}})

(def slacker (slack credentials {:username {{ ansible_env.SLACK_USERNAME|default('"Riemann"') }}
                                 :channel {{ ansible_env.SLACK_CHANNEL|default('"#test"') }}
                                 :icon ":smile"}))

(let [index (index)]
  ; Inbound events will be passed to these streams:
  (streams
    (default :ttl 60
      ; Index all events immediately.
      index

      (where (and (service "activeControllerCount.Value")
                  (not (expired? event))
                  (== metric 1))
        (with :state "ok" index)
             (else (with :state "critical" index)))


      (where (and (service "underReplicatedPartitions.Value")
                  (not (expired? event))
                  (<= metric 0))
        (with :state "ok" index)
             (else (with :state "critical" index)))


      (where (and (service "logFlushRateAndTimeMs.OneMinuteRate")
                  (not (expired? event))
                  (<= metric 2000))
        (with :state "ok" index)
             (else (with :state "critical" index)))

      (where (and (service "memory")
                  (not (expired? event))
                  (<= metric 0.9))
        (with :state "ok" index)
             (else (with :state "critical" index)))

      (where (and (service "cpu")
                  (not (expired? event))
                  (<= metric 0.9))
        (with :state "ok" index)
             (else (with :state "critical" index)))

      (where (and (service "disk")
                  (not (expired? event))
                  (<= metric 0.9))
        (with :state "ok" index)
             (else (with :state "critical" index)))

      (where (and (service "fd sys")
                  (not (expired? event))
                  (<= metric 65000))
        (with :state "ok" index)
             (else (with :state "critical" index)))

      (changed-state {:init "ok"}
        (stable 30 :state
            slacker))

      ; Log expired events.
      (expired
        (fn [event] (info "expired" event))))))
